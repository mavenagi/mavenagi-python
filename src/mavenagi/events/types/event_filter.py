# This file was auto-generated by Fern from our API Definition.

from ...core.pydantic_utilities import UniversalBaseModel
import typing
import typing_extensions
import datetime as dt
from ...core.serialization import FieldMetadata
from ...commons.types.entity_id import EntityId
from .event_type import EventType
from .user_event_name import UserEventName
from .system_event_name import SystemEventName
from ...core.pydantic_utilities import IS_PYDANTIC_V2
import pydantic


class EventFilter(UniversalBaseModel):
    search: typing.Optional[str] = None
    created_after: typing_extensions.Annotated[typing.Optional[dt.datetime], FieldMetadata(alias="createdAfter")] = None
    created_before: typing_extensions.Annotated[typing.Optional[dt.datetime], FieldMetadata(alias="createdBefore")] = (
        None
    )
    references: typing.Optional[typing.List[EntityId]] = None
    event_types: typing_extensions.Annotated[
        typing.Optional[typing.List[EventType]], FieldMetadata(alias="eventTypes")
    ] = None
    user_event_names: typing_extensions.Annotated[
        typing.Optional[typing.List[UserEventName]], FieldMetadata(alias="userEventNames")
    ] = None
    system_event_names: typing_extensions.Annotated[
        typing.Optional[typing.List[SystemEventName]], FieldMetadata(alias="systemEventNames")
    ] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
