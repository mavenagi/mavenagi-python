# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

from ...core.datetime_utils import serialize_datetime
from .app_user import AppUser
from .entity_id_base import EntityIdBase

try:
    import pydantic.v1 as pydantic  # type: ignore
except ImportError:
    import pydantic  # type: ignore


class AppUserRequest(AppUser):
    """
    from mavenagi import AppUserIdentifier, AppUserRequest, EntityIdBase, UserData

    AppUserRequest(
        user_id=EntityIdBase(
            reference_id="user-0",
        ),
        identifiers={
            AppUserIdentifier(
                value="joe@myapp.com",
                type="EMAIL",
            )
        },
        data={
            "name": UserData(
                value="Joe",
                visibility="VISIBLE",
            )
        },
    )
    """

    user_id: EntityIdBase = pydantic.Field(alias="userId")
    """
    ID that uniquely identifies this app user
    """

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().dict(**kwargs_with_defaults)

    class Config:
        frozen = True
        smart_union = True
        allow_population_by_field_name = True
        populate_by_name = True
        extra = pydantic.Extra.allow
        json_encoders = {dt.datetime: serialize_datetime}
