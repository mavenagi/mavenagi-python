# This file was auto-generated by Fern from our API Definition.

from __future__ import annotations

import typing

from .conversation_precondition import ConversationPrecondition
from .metadata_precondition import MetadataPrecondition

try:
    import pydantic.v1 as pydantic  # type: ignore
except ImportError:
    import pydantic  # type: ignore


class Precondition_User(MetadataPrecondition):
    precondition_type: typing.Literal["user"] = pydantic.Field(alias="preconditionType", default="user")

    class Config:
        frozen = True
        smart_union = True
        allow_population_by_field_name = True
        populate_by_name = True


class Precondition_Conversation(pydantic.BaseModel):
    precondition_type: typing.Literal["conversation"] = pydantic.Field(alias="preconditionType", default="conversation")
    value: ConversationPrecondition

    class Config:
        frozen = True
        smart_union = True
        allow_population_by_field_name = True
        populate_by_name = True


class Precondition_Group(PreconditionGroup):
    precondition_type: typing.Literal["group"] = pydantic.Field(alias="preconditionType", default="group")

    class Config:
        frozen = True
        smart_union = True
        allow_population_by_field_name = True
        populate_by_name = True


"""
from mavenagi import Precondition_Group, Precondition_User

Precondition_Group(
    operator="AND",
    preconditions=[
        Precondition_User(
            key="userKey",
        ),
        Precondition_User(
            key="userKey2",
        ),
    ],
)
"""
Precondition = typing.Union[Precondition_User, Precondition_Conversation, Precondition_Group]
from .precondition_group import PreconditionGroup  # noqa: E402

Precondition_Group.update_forward_refs(Precondition=Precondition, PreconditionGroup=PreconditionGroup)
