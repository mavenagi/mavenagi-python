# This file was auto-generated by Fern from our API Definition.

from __future__ import annotations

import typing

from .conversation_executed_action_precondition import ConversationExecutedActionPrecondition
from .metadata_precondition import MetadataPrecondition
from .tags_precondition import TagsPrecondition

try:
    import pydantic.v1 as pydantic  # type: ignore
except ImportError:
    import pydantic  # type: ignore


class ConversationPrecondition_Tags(TagsPrecondition):
    conversation_precondition_type: typing.Literal["tags"] = pydantic.Field(
        alias="conversationPreconditionType", default="tags"
    )

    class Config:
        frozen = True
        smart_union = True
        allow_population_by_field_name = True
        populate_by_name = True


class ConversationPrecondition_Metadata(MetadataPrecondition):
    conversation_precondition_type: typing.Literal["metadata"] = pydantic.Field(
        alias="conversationPreconditionType", default="metadata"
    )

    class Config:
        frozen = True
        smart_union = True
        allow_population_by_field_name = True
        populate_by_name = True


class ConversationPrecondition_ActionExecuted(ConversationExecutedActionPrecondition):
    conversation_precondition_type: typing.Literal["actionExecuted"] = pydantic.Field(
        alias="conversationPreconditionType", default="actionExecuted"
    )

    class Config:
        frozen = True
        smart_union = True
        allow_population_by_field_name = True
        populate_by_name = True


ConversationPrecondition = typing.Union[
    ConversationPrecondition_Tags, ConversationPrecondition_Metadata, ConversationPrecondition_ActionExecuted
]
