# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

from ...commons.types.entity_id_base import EntityIdBase
from ...core.datetime_utils import serialize_datetime
from .action_base import ActionBase

try:
    import pydantic.v1 as pydantic  # type: ignore
except ImportError:
    import pydantic  # type: ignore


class ActionRequest(ActionBase):
    """
    from mavenagi import (
        ActionRequest,
        EntityIdBase,
        Precondition_Group,
        Precondition_User,
    )

    ActionRequest(
        action_id=EntityIdBase(
            reference_id="get-balance",
        ),
        name="Get the user's balance",
        description="This action calls an API to get the user's current balance.",
        user_interaction_required=False,
        user_form_parameters=[],
        precondition=Precondition_Group(
            operator="AND",
            preconditions=[
                Precondition_User(
                    key="userKey",
                ),
                Precondition_User(
                    key="userKey2",
                ),
            ],
        ),
    )
    """

    action_id: EntityIdBase = pydantic.Field(alias="actionId")
    """
    ID that uniquely identifies this action
    """

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().dict(**kwargs_with_defaults)

    class Config:
        frozen = True
        smart_union = True
        allow_population_by_field_name = True
        populate_by_name = True
        extra = pydantic.Extra.allow
        json_encoders = {dt.datetime: serialize_datetime}
