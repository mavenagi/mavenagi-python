# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

from ...core.datetime_utils import serialize_datetime
from .capability import Capability
from .response_length import ResponseLength

try:
    import pydantic.v1 as pydantic  # type: ignore
except ImportError:
    import pydantic  # type: ignore


class ResponseConfig(pydantic.BaseModel):
    capabilities: typing.List[Capability] = pydantic.Field()
    """
    List of capabilities supported by the caller. Defaults to all. Only the markdown capability is supported at this time. If not provided, responses will be plain text.
    """

    is_copilot: bool = pydantic.Field(alias="isCopilot")
    """
    Whether the response is for an human agent (true) or an end user (false). Defaults to false.
    """

    response_length: ResponseLength = pydantic.Field(alias="responseLength")
    """
    The desired response length. Defaults to ResponseLength.MEDIUM.
    """

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().dict(**kwargs_with_defaults)

    class Config:
        frozen = True
        smart_union = True
        allow_population_by_field_name = True
        populate_by_name = True
        extra = pydantic.Extra.allow
        json_encoders = {dt.datetime: serialize_datetime}
