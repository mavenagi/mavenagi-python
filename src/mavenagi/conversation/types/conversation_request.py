# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

from ...commons.types.entity_id_base import EntityIdBase
from ...core.datetime_utils import serialize_datetime
from .conversation_base import ConversationBase
from .conversation_message_request import ConversationMessageRequest

try:
    import pydantic.v1 as pydantic  # type: ignore
except ImportError:
    import pydantic  # type: ignore


class ConversationRequest(ConversationBase):
    conversation_id: EntityIdBase = pydantic.Field(alias="conversationId")
    """
    An externally supplied ID to uniquely identify this conversation
    """

    messages: typing.List[ConversationMessageRequest] = pydantic.Field()
    """
    The messages in the conversation
    """

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().dict(**kwargs_with_defaults)

    class Config:
        frozen = True
        smart_union = True
        allow_population_by_field_name = True
        populate_by_name = True
        extra = pydantic.Extra.allow
        json_encoders = {dt.datetime: serialize_datetime}
